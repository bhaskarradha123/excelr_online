creation of Maven Project:
------------------------
clr+N--->search for maven in wizard--->choose maven project--->click on create 
a simple project-->next-->provide groupId and artifactId-->next-->finish

    groupID:com.excelR
    artifactId:project_Name

Spring:
-------
  : it is a framework for java
  : it is a free ,powerful ,lightweight and open source framework
  : it is used to create web applications , desktop applications and mobile applications
  : it is used to create web services
  : it is used to create enterprise applications, microservices

Spring is introduced by Rod Jhonson in 2003 by apache software foundation

Why use spring:
----------------
   1.Reduces boilerplate code and complexity
   2.easy to test and maintain
   3.flexible, modular and extensible
   4.Easy to learn and implement
   5.supports microservices, cloud deployment and Rest APIs development
   6.promote layer separation and separation of concerns

Modules in spring:
-----------------
       1.Spring-core
       2.Spring Aop
       3.Spring web
       4.Spring ORM
       5.Spring mvc
       6.Spring security
       7.Spring boot
       8.Spring cloud
       9.Spring Test
Spring -core:
-------------
    - it is a foundation of spring framework
    - it provides basic building blocks for spring framework
    - it provides fundamental features like creating a container and beans
    - IOC (Inversion of Control)
    - DI (Dependency Injection)

IOC:(Inversion of Control)- container
--------------------------
           : it is a design pattern in spring framework
           : it is used to manage the dependencies between objects by cresting a container
           : can create a container using BeanFactory and ApplicationContext

Hierarchy of IOC:
----------------
                        BeanFactory-i
                          |
                          |
                ----------------------------
                |                          |
            XmlBeanFactory-c          ApplicationContext-i
                                            |
                    --------------------------------------------------------------
                    |                                                      |
                ClassPathXmlApplicationContext-c   AnnotationConfigApplicationContext-c

---------------------------------------------------------------------------------------
            BeanFactory                              ApplicationContext
---------------------------------------------------------------------------------------
    root interface                                  child interface
    create core container                         create advance container
    bean inilization is lazy                    bean inilization is eager
    based on xml                               based on xml and java annotations
    rarely used in springBoot and mvc          used in springBoot and mvc



Dependency Injection:
-------------------------
     - the process of injecting /assigning the values into an object is called dependency injection
     - it is a design pattern in spring framework
     - it is used to manage the dependencies between objects
     - types:
        help to inject values into objects
           1.setter injection ---<property name="" value=""> --setter methods are required
           2.constructor injection ---<constructor-arg name="" value=""> --constructor arguments are required
        help to inject references to objects
           3.field injection ---<property name="" ref="">
                                <constructor-arg name="" ref=""> 
                             --field is required in class



RelationsShip:
-------------
               one class is having relationship with other class
               Types: 1.Is - a relationship(Inheritance) 
                      2.has - a relationship
Has-a-relationship:(Association)
-------------------
              -one class is dependent on another class
              -one object will act like a container for another object
              Types:1.Composition 
                    2.Aggregation
    ex: Car has a Engine  , Bus has a Passengers

     Men --------Father
                    |
                    |
                   Son

1.Composition: one class is dependent on another class strongly
               ex: Car has a Engine
2.Aggregation: one class is dependent on another class weakly
               ex: Bus has a Passengers

annotations used to create objects in spring:
--------------------------------------------
1.@Component - used to annotate on model class/ blue prints/pojo class/encapsulated class
2.@Repository - used to annotate on dao class (data access object layer===db logic)
3.@Service - used to annotate on service class (business logic)
4.@Controller - used to annotate on controller class (web logic)
5.@RestController - used to annotate on controller class (web logic===Rest APIs)


POJO(plain old java object):
---------------------------
           -it is a class that contains properties and methods , constructor only


create springboot project:
----------------------------
   steps: 1.clt+N --->search for spring in wizard
          2.choose spring starter in wizard
          3.provide information 
                 name=project_Name
                 groupId=com.excelR
                 artifactId=project_Name
                 type=maven
                 java version=17/21
                 packaging=jar
                 language=java
                 package=groupID+artifactID--->next
          4.add dependencies
                 1.Spring web-for embed server
                 2.Spring boot dev tools-for development
                 3.Spring data jpa-for database
                 4.Mysql Driver-for database(mysql)-->next-->finish

         5.add database configuration in application.properties file
            # server.port=8082 - to change port number
            spring.jmx.enabled=false

            spring.datasource.url= jdbc:mysql://localhost:3306/DatabaseName?createDatabaseIfNotExist=true
            spring.datasource.username=****
            spring.datasource.password=****

            spring.jpa.hibernate.ddl-auto=update
            spring.jpa.properties.hibernate.format_sql=true
            spring.jpa.show-sql=true

            spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect

            spring.mvc.pathmatch.matching-strategy=ant-path-matcher

annotations used to create Tables in database:
----------------------------------------------
     1.@Entity - used to annotate on model class/ blue prints/pojo class/encapsulated class
               - used to convert class into table
     2.@Id - used to annotate on primary key
     3.@Table - used to annotate on table name(optional)
     4.@Column - used to annotate on column name(optional)
               - to change the column properties like name , length , datatype etc.
     5.@GeneratedValue - used to generate the primary key automatically

annotation on classes based on layers:
---------------------------------------

                          db logic         business logic        web logic
db<---->Repository<------>dao<------------->service<----------->controller<-------------->postman/webpages
     JpaRepository       @Repository       @Service            @RestController


annotations on method to deal with req:
----------------------------------------

@PostMapping--->post method-->save data /create data

@GetMapping--->get method-->fetch data /read data

@PutMapping/@PatchMapping--->put method-->update data /modify data

@DeleteMapping--->delete method-->delete data

@RequestMapping--->get/post/put/patch/delete -- for all operations used on method and class(for base url)



annotations on variables to inject:(Dependency Injection)
------------------------------------
@value --->used to inject values into variables

@Autowired--->used to inject references to objects


annotations used to handle exceptions:
========================================

@RestControllerAdvice--->is a class used to handle exceptions

@ExceptionHandler--->used to handle exceptions which are thrown by methods in controller class
                 



                

